#!/usr/bin/python3
import rclpy
import numpy as np
import matplotlib.pyplot as plt
from rclpy.node import Node
from std_msgs.msg import String
from sensor_msgs.msg import Image
from kobuki_ros_interfaces.msg import Sound
from ultralytics import YOLO

from cv_bridge import CvBridge
import cv2
import time

model = YOLO("/home/s2c7/ros_space/larm-hubo/ia_image_detection/runs/detect/train3/weights/last.pt")
threshold = 0.8

isOk=True
def listen():
    # Initialize ROS node with ROS client
    time.time()
    rclpy.init()
    aNode= Node( "listener" )
    listener= ROSListener1()
    listener.initializelistener(aNode)
    rclpy.spin(aNode)

    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

class ROSListener1():

    def __init__(self):
        self.objet=False
        self.bridge=CvBridge()
        self.bridge1=CvBridge()
        self.image_cv2=np.asanyarray([])
        self.sound=Sound()
        self.sound._value=4
        self.mot=String()
        self.mot.data="fantome trouvÃ©"

    def initializelistener(self, rosNode):
        self._logger= rosNode.get_logger()
        self._subscription= rosNode.create_subscription(
            Image, 'sensor_msgs/image',
            self.listener_callback1,10)
        self._sub=rosNode.create_subscription(Image,'depth',self.listener_callback2,10)
        self._publisher=rosNode.create_publisher(Sound,'/commands/sound',10)
        self._publisher1=rosNode.create_publisher(String,'detection',10)
        self._timer1=rosNode.create_timer(0.1,self.traitement_image)
        

    def listener_callback1(self,msg):
        self.image_cv2=  self.bridge.imgmsg_to_cv2(msg,'bgr8') 


    def listener_callback2(self,msg):
        self.image_profondeur=self.bridge1.imgmsg_to_cv2(msg,'bgr8')


    def traitement_image(self):
        frame = self.image_cv2 
        results = model(frame)[0]
        for result in results.boxes.data.tolist():
            x1, y1, x2, y2, score, class_id = result
            height = y2 - y1
            if score > threshold:
                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                cv2.putText(frame, results.names[int(class_id)].upper(), 
                            (int(x1), int(y1) - 10), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0), 2)
                "self._publisher.publish(self.sound)"
        images=np.hstack((self.image_cv2,self.image_profondeur))
        cv2.namedWindow('RealSense', cv2.WINDOW_AUTOSIZE)
        cv2.imshow("Camera", images)
        cv2.waitKey(1)

if __name__ == '__main__':
    listen()
