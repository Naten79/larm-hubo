#!/usr/bin/python3
import rclpy
import numpy as np
import matplotlib.pyplot as plt
from rclpy.node import Node
from std_msgs.msg import String
from sensor_msgs.msg import Image
#from kobuki_ros_interfaces.msg import Sound
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from cv_bridge import CvBridge
from geometry_msgs.msg import Point
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Quaternion
from std_msgs.msg import String
import cv2
import time


def listen():
    # Initialize ROS node with ROS client
    rclpy.init()
    aNode= Node( "listener" )
    listener= ROSListener()
    listener.initializelistener(aNode)
    rclpy.spin(aNode)

    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()



class ROSListener():

    def __init__(self):
        self.L=[]
        self.bool = 0
        self.b = 1
        self.coord = []
        self.compteur = 0
        self.mot=String()
        self.incr=0.0
# Initialization of the marker array that will contain all the markers of the ghosts
        self.marker=MarkerArray()
#Initialization of the marker that represent the robot on the map
        self.marker1=Marker()
        self.marker1.header.frame_id='base_link'
        self.marker1.id=0
        self.marker1.ns="/marker"
        self.marker1.action=Marker.ADD
        self.marker1.type=Marker.CUBE
        self.marker1.scale.x = 0.5
        self.marker1.scale.y = 0.5
        self.marker1.scale.z = 0.5
        self.marker1.color.a=1.0
        self.marker1.color.r=0.0
        self.marker1.color.g=0.0
        self.marker1.color.b=0.0
        self.marker1.pose = Pose()
        self.marker1.pose.position = Point(x=0.0, y=0.0, z=0.0)
        self.marker1.pose.orientation = Quaternion(x=0.0, y=0.0, z=0.0, w=1.0)
        
        self.marker.markers.append(self.marker1)


    def initializelistener(self, rosNode):
#Initialization of the node
        self._logger= rosNode.get_logger()
        self._publisher1=rosNode.create_publisher(MarkerArray,'visualization_msgs/marker',10)

        self._sub=rosNode.create_subscription(String,'Apres_tf',self.listener_callback,10)
        # Publish a message every 1 second
        #timer_period = 1 # seconds
        #self._timer = rosNode.create_timer(timer_period, self.publish_marker)


    def listener_callback(self,msg):
        self.mot=msg
        if self.mot.data!='':
            x, y = (float(self.mot.data.split(',',2)[0]), float(self.mot.data.split(',',2)[1]))
            # self.coord.append(float(self.mot.data.split(',',2)[0]))         #Add the coordinates x in the listcoord
            # self.coord.append(float(self.mot.data.split(',',2)[1]))         #Add the coordinate y in the list coord
            add_point = True
            for point in self.L:
#if the point is next to an existing marker, the markerdoes not appear which allow us to kown that the ghost was already detected
                if ((point[0]-x)**2+(point[1]-y)**2)<1.0 :
                    add_point = False
            # updating the marker array and publishing it each time that a new ghost is detected
            if add_point:
                self.L.append((x, y))
                self.publish_marker((x,y))


    def publish_marker(self,point):  
#Creation of a unique marker for each ghost detected
        m = Marker()
        m.action=Marker.ADD
        m.type=Marker.CUBE
        m.header.frame_id='map'
        m.id=self.b     #correspond to the number of the ghost dÃ©tected on the map
        m.ns="marker"+str(m.id)
        m.scale.x = 0.2
        m.scale.y = 0.2
        m.scale.z = 0.2
        m.color.a=1.0
        m.color.r=0.0
        m.color.g=1.0
        m.color.b=0.0
        m.pose = Pose()
        m.pose.position = Point(x=point[0], y=point[1], z=0.0)
        m.pose.orientation = Quaternion(x=0.0, y=0.0, z=0.0, w=1.0)
        self.marker.markers.append(m)
        self.b+=1
                    
                  
        self._publisher1.publish(self.marker)

if __name__ == '__main__':
    listen()
