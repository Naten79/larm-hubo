#!/usr/bin/python3
import rclpy
import numpy as np
import matplotlib.pyplot as plt
from rclpy.node import Node
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2


isOk=True
def listen():
    # Initialize ROS node with ROS client
    rclpy.init()
    aNode= Node( "listener" )
    listener= ROSListener1(aNode)
    while isOk:
        listener.listener_callback()
        listener.traitement_image()
        listener.publish()
        rclpy.spin_once(aNode, timeout_sec=0.001)
    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

class ROSListener1():

    def __init__(self, rosNode):
        self._logger= rosNode.get_logger()
        self._subscription= rosNode.create_subscription(
            Image, 'sensor_msgs',
            self.listener_callback, 10)
        self._publisher=rosNode.create_publisher(String,'fantome',10)
        self.compteurpixels=0
        self.objet=False
        self.bridge=CvBridge()
        self.image_cv2=np.asanyarray([])

    def listener_callback(self, msg):
        image_cvb=msg.data
        self.image_cv2=self.bridge.imgmsg_to_cv2(image_cvb,"bgr8")

    def traitement_image(self):
        b,g,r = cv2.split(self.image_cv2)
        mask=np.uint8((r<90)&(g>80)&(b<90))
        r=r*mask
        g=g*mask
        b=b*mask
        newRGBImage = cv2.merge((b,g,r))
        mask_RGB=cv2.merge((mask,mask,mask))*255
        kernel = np.ones((3, 3), np.uint8)
        mask_RGB= cv2.morphologyE(mask_RGB, cv2.MORPH_OPEN, kernel)
        for i in range(len(mask_RGB)):
            for j in range(len(mask_RGB[0])):
                if mask_RGB[i][j]==255:
                    self.compteurpixels+=1
    

    def publish(self):
        if self.compteurpixels>1000:
            msg=String()
            msg.data='fantome trouv√©'
            self._publisher.publish(msg)

        
        





if __name__ == '__main__':
    listen()
